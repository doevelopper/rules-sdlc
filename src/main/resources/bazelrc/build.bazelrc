
####################################################################################################################
###############################                Build Configurations                  ###############################
####################################################################################################################

# We recommend enforcing a policy that keeps your CI from being slowed down
# by individual test targets that should be optimized
# or split up into multiple test targets with sharding or manually.
# Set this flag to exclude targets that have their timeout set to eternal (>15m) from running on CI.
# Docs: https://bazel.build/docs/user-manual#test-timeout-filters
build --test_timeout_filters=-eternal

# Set this flag to enable re-tries of failed tests on CI.
# When any test target fails, try one or more times. This applies regardless of whether the "flaky"
# tag appears on the target definition.
# This is a tradeoff: legitimately failing tests will take longer to report,
# but we can paper over flaky tests that pass most of the time.
# The alternative is to mark every flaky test with the `flaky = True` attribute, but this requires
# the buildcop to make frequent code edits.
# Not recommended for local builds so that the flakiness is observed during development and thus
# is more likely to get fixed.
# Note that when passing after the first attempt, Bazel will give a special "FLAKY" status.
# Docs: https://bazel.build/docs/user-manual#flaky-test-attempts
build --flaky_test_attempts=2

# Announce all announces command options read from the bazelrc file(s) when starting up at the
# beginning of each Bazel invocation. This is very useful on CI to be able to inspect what Bazel rc
# settings are being applied on each run.
# Docs: https://bazel.build/docs/user-manual#announce-rc
# build --announce_rc

# Add a timestamp to each message generated by Bazel specifying the time at which the message was
# displayed.
# Docs: https://bazel.build/docs/user-manual#show-timestamps
build --show_timestamps

# Use colors to highlight output on the screen. Set to `no` if your CI does not display colors.
# Docs: https://bazel.build/docs/user-manual#color
build --color=yes
# The terminal width in columns. Configure this to override the default value based on what your CI system renders.
# Docs: https://github.com/bazelbuild/bazel/blob/1af61b21df99edc2fc66939cdf14449c2661f873/src/main/java/com/google/devtools/build/lib/runtime/UiOptions.java#L151
build --terminal_columns=143

# Use cursor controls in screen output.
# Docs: https://bazel.build/docs/user-manual#curses
build --curses=yes

# Only show progress every 5 seconds on CI.
# https://bazel.build/reference/command-line-reference#flag--show_progress_rate_limit
build --show_progress_rate_limit=5

# # Do not show warnings from external dependencies.
# build --output_filter="^//"
# build --copt='-std=c++17' --linkopt='-L/usr/local/lib'


###############################                GCC  Compiler                  ###############################
build:gnu-gcc --action_env=CC=gcc
build:gnu-gcc --action_env=CXX=g++
build:gnu-gcc --client_env=CC=gcc
build:gnu-gcc --client_env=CXX=g++

###############################                LLVM Compiler                  ###############################

# Flags for libc++
build:libc++ --action_env=CXXFLAGS=-stdlib=libc++
build:libc++ --action_env=LDFLAGS=-stdlib=libc++
build:libc++ --action_env=BAZEL_CXXOPTS=-stdlib=libc++
build:libc++ --action_env=BAZEL_LINKLIBS=-lc++abi:-lc++
build:libc++ --define force_libcpp=enabled

# TODO(leary): 2020-09-09 Make it possible to enable this option.
# Currently m4 doesn't seem to work as a dependency.
# build --crosstool_top=@llvm_toolchain_llvm//:toolchain

build:llvm --action_env=CC=clang
build:llvm --action_env=CXX=clang++
build:llvm --client_env=CC=clang
build:llvm --client_env=CXX=clang++
build:llvm --action_env=BAZEL_COMPILER=clang
build:llvm --incompatible_linkopts_to_linklibs=false
build:llvm --config=libc++
###############################                Linux build quirks                  ###############################

build:linux --action_env=PYTHON_BIN_PATH=python3
# build:linux --action_env=PYTHON_BIN_PATH=/usr/bin/python3
# build:linux --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
# build:linux --action_env=BAZEL_LINKOPTS=-lm
# build:linux --action_env=CXXFLAGS=-Wno-unused-variable
build:linux --client_env=BAZEL_CXXOPTS=-std=c++17
build:linux --repo_env=PYTHON_BIN_PATH=python3
build:linux --host_force_python=PY3
build:linux --python_path=python3
build:linux --cxxopt=-std=c++17 --host_cxxopt=-std=c++17
# Enable colorful output of GCC/clang
build:linux --cxxopt="-fdiagnostics-color=always"

# build:linux --platforms=//:linux
# build:linux --extra_toolchains=@llvm_toolchain//:cc-toolchain-linux
# build:linux --cxxopt=-stdlib=libstdc++
# build:linux --linkopt=-lstdc++
# build:linux --copt=-fPIC
# build:linux --copt=-Wno-deprecated-declarations
# build:linux --conlyopt=-fexceptions
# build:linux --fission=dbg,opt
# build:linux --features=per_object_debug_info
# build --cxxopt=-Wno-macro-redefined # For boost, because it's really annoying.


# Add compile option for all C++ files
# build --cxxopt -Wnon-virtual-dtor
# build --cxxopt -Wformat
# build --cxxopt -Wformat-security
# build --cxxopt "-std=c++17"
# build --copt "-Wno-sign-compare"
# build --copt "-Wno-comment"
# build --host_copt "-Wno-sign-compare"
# build --host_copt "-Wno-comment"
# build -c opt
# build --local_ram_resources=4096
# build --local_cpu_resources=4
# build --show_timestamps --color=yes
# build:default --verbose_failures
# build --test_tmpdir=/tmp/bazel_tmp --verbose_failures
# This is so we understand failures better
# build --verbose_failures
# # build --symlink_prefix=target/ --worker_sandboxing
# build --copt="-Werror=sign-compare"
# build --copt="-Werror=return-type"
# build --copt="-Werror=reorder"
# build --copt="-Werror=unused-variable"
# build --copt="-Werror=unused-but-set-variable"
# build --copt="-Werror=switch"

# build --enable_platform_specific_config
# build --incompatible_enable_cc_toolchain_resolution


###############################                Windows build quirks                  ###############################


# build:windows --platforms=//:windows
# build:windows --extra_execution_platforms=//:windows
# build:windows --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl
# build:windows --cxxopt=/std:c++latest
# build:windows --cxxopt=-Xclang
# build:windows --cxxopt=-fcolor-diagnostics
# build:windows --cxxopt=-Xclang
# build:windows --cxxopt=-fansi-escape-codes
# build:windows --cxxopt=/D_HAS_DEPRECATED_RESULT_OF=1
# build:windows --cxxopt=/Zc:__cplusplus
# build:windows --cxxopt=/D_SILENCE_CLANG_COROUTINE_MESSAGE=1
# build:windows --cxxopt=/DBOOST_ASIO_DISABLE_STD_COROUTINE=1
# build:windows --action_env=TMPDIR
# build:windows --define signal_trace=disabled
# build:windows --define hot_restart=disabled
# build:windows --define tcmalloc=disabled
# build:windows --define wasm=disabled
# build:windows --define manual_stamp=manual_stamp
# build:windows --cxxopt="/std:c++17"
# build:windows --copt=-DWIN32_LEAN_AND_MEAN
# build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
# build:windows --copt=-DNOGDI
# build:windows --host_copt=-DNOGDI

# Release builds without debug symbols.
# build:release -c opt
# build:release --strip=always

# Debug builds
# build:debug -c dbg


# build:opt --compilation_mode=opt
# build:opt --copt=-Wframe-larger-than=16384

# build:dbg --compilation_mode=dbg
# build:dbg --copt=-Werror=return-stack-address

# # For coverage builds, don't include tests tagged with "nocoverage"
# coverage --config=coverage --test_tag_filters=-nocoverage
# build:coverage --cxxopt=-DNDEBUG
# build:coverage --action_env=BAZEL_USE_LLVM_NATIVE_COVERAGE=1
# build:coverage --action_env=GCOV=llvm-profdata
# build:coverage --action_env=BAZEL_LLVM_COV=llvm-cov
# build:coverage --experimental_generate_llvm_lcov
# build:coverage --collect_code_coverage
# build:coverage --combined_report=lcov
# build:coverage --instrumentation_filter="//src[:/]"
