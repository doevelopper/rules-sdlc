
# load("@rules_license//examples/vendor/constant_gen:defs.bzl", "constant_gen")
# load("@rules_license//rules:compliance.bzl", "licenses_used")
# load("@rules_license//rules:license_policy_check.bzl", "license_policy_check")
# load("@rules_license//rules:license.bzl", "license")

load(
    "@rules_cc//cc:defs.bzl",
    "cc_binary",
    "cc_library"
)

load(
    "@rules_pkg//:pkg.bzl",
    "pkg_tar",
    "pkg_deb",
    "pkg_zip"
)

load(
    "@com.github.doevelopper.rules-sdlc//src/main/resources/starlark:Visibility.bzl",
    "SHARED_LIBRARY_SUPPORT"
)


COMMON_DEFINES = [
    "LOG_LEVEL=1",
    "DLOG4CXX_STATIC",
]

COMMON_HDRS = [
    "rules/sdlc/common/API_Export.hpp",
    "rules/sdlc/common/app/AppInfo.hpp",
    "rules/sdlc/common/PimplPtr.hpp",
    "rules/sdlc/common/PimplPtr.inl",
    "rules/sdlc/common/SharedPimplPtr.hpp",
    "rules/sdlc/common/SharedPimplPtr.inl",
    "rules/sdlc/common/semver/GitRevision.hpp",
    "rules/sdlc/common/CompilerDetection.hpp",
]

COMMON_SRCS = [
]

#===== win32 =====
WIN32_DEFINES = [
    "RTX_WIN32",
]
WIN32_HDRS = []
WIN32_SRCS = []
WIN32_LINKOPTS = []

# ===== linux =====
LINUX_DEFINES = [
    "RT_LINUX",
]
LINUX_HDRS = []
LINUX_SRCS = []
LINUX_LINKOPTS = [
    "-L/usr/local/lib",
    "-pthread",
    "-lrt",
    "-luuid", #avoid having libapr-1.a(rand.o):rand.c:function apr_os_uuid_get: error: undefined reference to 'uuid_generate'
]

# ===== darwin =====
DARWIN_DEFINES = []
DARWIN_HDRS = []
DARWIN_SRCS = []
DARWIN_LINKOPTS = []

cc_library(
    # linkshared/linkstatic=True,
    name = "rules-sdlc.std.main",
    srcs = [
        "rules/sdlc/common/app/Application.cpp",
        "rules/sdlc/common/app/Application.hpp",
        "rules/sdlc/common/app/ApplicationPrivate.cpp",
        "rules/sdlc/common/app/ApplicationPrivate.hpp",
        "rules/sdlc/common/app/Channel.cpp",
        "rules/sdlc/common/app/Channel.hpp",
        "rules/sdlc/common/app/ExecutionContext.cpp",
        "rules/sdlc/common/app/ExecutionContext.hpp",
        "rules/sdlc/common/app/MethodCaller.cpp",
        "rules/sdlc/common/app/MethodCaller.hpp",
        "rules/sdlc/common/app/Method.cpp",
        "rules/sdlc/common/app/Method.hpp",
        "rules/sdlc/common/app/OptionDescription.cpp",
        "rules/sdlc/common/app/OptionDescription.hpp",
        "rules/sdlc/common/app/Plugin.cpp",
        "rules/sdlc/common/app/Plugin.hpp",
        "rules/sdlc/common/app/PluginInterface.cpp",
        "rules/sdlc/common/app/PluginInterface.hpp",
        "rules/sdlc/common/Dummy.hpp",
        "rules/sdlc/common/Dummy.cpp",
        "rules/sdlc/common/logging/LoggingServicePrivate.hpp",
        "rules/sdlc/common/logging/LoggingServicePrivate.cpp",
        "rules/sdlc/common/logging/LoggingService.hpp",
        "rules/sdlc/common/logging/LoggingService.cpp",
        "rules/sdlc/common/semver/Version.hpp",
        "rules/sdlc/common/semver/Version.cpp",

    ] + COMMON_SRCS + COMMON_HDRS + select({
        "@bazel_tools//src/conditions:windows": WIN32_SRCS + WIN32_HDRS,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_SRCS + LINUX_HDRS,
        "//conditions:default": [],
    }),

    defines =  COMMON_DEFINES + select({
        "@bazel_tools//src/conditions:windows": WIN32_DEFINES,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_DEFINES,
        "//conditions:default": [],
    }),

    copts = select({
        "@platforms//os:windows": [
            "/std:c++17"
        ],
        "//conditions:default": [
            "-DLOG_LEVEL=1",
    #         "-D_REENTRANT",
        ],
    }),  #+ SHARED_LIBRARY_SUPPORT + DEFAULT_COPTS,

#     features = select({
#         ":windows": ["windows_export_all_symbols"],
#         "//conditions:default": [],
#     }),

    includes = [
        ".",
    ],

    linkopts = [

    ] + select({
        "@bazel_tools//src/conditions:windows": WIN32_LINKOPTS,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_LINKOPTS,
        "@bazel_tools//src/conditions:darwin": DARWIN_LINKOPTS,
    }),

#     linkopts = [
#         # "-lboost_program_options",
# #         # "-lboost_context",
# #         # "-lxerces-c",
#         # "-lssl",
#         # "-lcrypto",
#         # "-ldl",
#         # "-lpthread",
#     # ], # + FLAG_LINKOPTS,
#         # "-lboost_thread",
#         # "-lboost_system",
#         # "-lboost_regex",
#         # "-lboost_context",
#         # "-lboost_date_time",
#         # "-lboost_program_options",
#         # "-lboost_filesystem",
#         # "-lboost_signals2",
# #     target_compatible_with = [
# #         "@platforms//cpu:x86_64",
# #         "@platforms//os:linux",
#     ],


    deps = [
        "@org_apache_logging_log4cxx//:log4cxx",
        "@boost//:date_time",
        "@boost//:algorithm",
        "@boost//:program_options",
        "@boost//:asio",
        "@boost//:chrono",
        "@boost//:filesystem",
        "@boost//:locale",
        "@boost//:system",
        "@boost//:thread",
        "@boost//:signals2",
        # "@com_google_absl//absl/strings",
        # "@com_google_absl//absl/strings:str_format",
        # "@com_google_absl//absl/debugging:failure_signal_handler",
        # "@com_google_absl//absl/random",
        # "@com_github_tencent_rapidjson//:rapidjson",
        # "@org_apache_apr//:apr",
        # "@com_github_libexpat//:expat",
        # "@org_apache_apr_util//:aprutil",
        # "@boost//:asio_ssl",
        # "@com_github_openssl//:openssl",
        # "@net_zlib_fossils//:zlib",
    ] + select({
        "@bazel_tools//src/conditions:windows": [],
        "@bazel_tools//src/conditions:linux_x86_64": [],
        "@bazel_tools//src/conditions:darwin": [],
        "//conditions:default": [],
    }),

#     # Uncomment this to enable full static link.
#     # features = ['fully_static_link'],

#     # Comment this out to use system malloc runtime.
#     # malloc = '@com_google_tcmalloc//tcmalloc'

    visibility = ["//visibility:public"],
)

cc_binary(
    name = "rules-sdlc.bin",
    srcs = [
        "rules/sdlc/common/main.cpp",
    ],
    copts = [
        "-D_REENTRANT",
        "-I/usr/local/include/",
        # $$EXT_BUILD_DEPS$$;$$EXT_BUILD_DEPS$$/apr;$$EXT_BUILD_DEPS$$/expat/;$$EXT_BUILD_DEPS$$/aprutil;$$EXT_BUILD_DEPS$$/openssl
    ],
    includes = [
        ".",
    ],

    linkopts = [
        "-L$$EXT_BUILD_DEPS$$/log4cxx",
        "-L$$EXT_BUILD_DEPS$$/org_apache_logging_log4cxx/copy_log4cxx/log4cxx/lib",
    ],

    deps = [
        ":rules-sdlc.std.main",
    ],

    # env = [
    #     $(location log4cxx) ,
    # ],

    visibility = ["//visibility:public"],
)

# pkg_tar(
#     name = "rules-sdlc-exe",
#     strip_prefix = "/src",
#     package_dir = "/usr/bin",
#     srcs = [
        # "//src/main/cpp:rules-sdlc.bin",
        # ],
#     mode = "0755",
# )

# pkg_tar(
#     name = "rules-sdlc-libs",
#      extension = "tar.gz",
#     strip_prefix = "/",
#     package_dir = "/usr/share/lib/rules-sdlc/tools",
#     srcs = [
#        "//src/main/cpp:rules-sdlc.std.main",
#    ],
#     mode = "0644",
# )

# pkg_tar(
#     name = "rules-sdlc",
#     extension = "tar.gz",
#     package_name = "rules-sdlc-${target_os}-${cpu}-${opt}",
#     deps = [
#         ":rules-sdlc-exe",
#         ":rules-sdlc-libs",
#     ],
    # srcs = [
    #     "README.txt",
    #     ":manpages",
    #     ":share_doc",
    #     "//resources/l10n:all",
    #     "//src/client:arch",
    #     "//src/server:arch",
    # ],
# )

# pkg_deb(
#     name = "deb",
#     data = ":content",
#     description = "My wonderful product",
#     maintainer = "someone@somewhere.com",
#     package = "mwp",
#     version = "3.14",
# )



#     visibility = ["//visibility:public"],
#     #visibility = ["//src/main/test:__pkg__"],
# )
