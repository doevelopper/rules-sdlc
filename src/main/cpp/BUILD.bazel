
# load("@rules_license//examples/vendor/constant_gen:defs.bzl", "constant_gen")
# load("@rules_license//rules:compliance.bzl", "licenses_used")
# load("@rules_license//rules:license_policy_check.bzl", "license_policy_check")
# load("@rules_license//rules:license.bzl", "license")

load(
    "@rules_cc//cc:defs.bzl",
    "cc_binary",
    "cc_library"
)

load(
    "@rules_pkg//:pkg.bzl",
    "pkg_tar",
    "pkg_deb",
    "pkg_zip"
)

load(
    "@rules_pkg//:mappings.bzl",
    "pkg_attributes",
    "pkg_filegroup",
    "pkg_files",
    "strip_prefix",
)

COMMON_DEFINES = [
    "LOG_LEVEL=1",
    "DLOG4CXX_STATIC",
]

COMMON_HDRS = [

]

COMMON_SRCS = [
]

#===== win32 =====
WIN32_DEFINES = [
    "RTX_WIN32",
]
WIN32_HDRS = []
WIN32_SRCS = []
WIN32_LINKOPTS = []

# ===== linux =====
LINUX_DEFINES = [
    "RT_LINUX",
]
LINUX_HDRS = []
LINUX_SRCS = []
LINUX_LINKOPTS = [
    "-L/usr/local/lib",
    "-lpthread",
    "-lrt",
    #  coometed out below because /usr/bin/gcc @bazel-out/k8-fastbuild/bin/src/main/cpp/libcom.github.doevelopper.rules.sdlc.main.so-2.params)
    "-luuid", #avoid having libapr-1.a(rand.o):rand.c:function apr_os_uuid_get: error: undefined reference to 'uuid_generate'

]

# ===== darwin =====
DARWIN_DEFINES = []
DARWIN_HDRS = []
DARWIN_SRCS = []
DARWIN_LINKOPTS = []

cc_library(
    # linkshared/linkstatic=True,
    name = "com.github.doevelopper.rules.sdlc.main",
    hdrs = [
        "com/github/doevelopper/rules/sdlc/API_Export.hpp",
        "com/github/doevelopper/rules/sdlc/CompilerDetection.hpp",
        "com/github/doevelopper/rules/sdlc/Poison.hpp",
    ],
    srcs = [
        "com/github/doevelopper/rules/sdlc/guide/Dummy.cpp",
        "com/github/doevelopper/rules/sdlc/guide/Dummy.hpp",

        "com/github/doevelopper/rules/sdlc/logging/LoggingServicePrivate.cpp",
        "com/github/doevelopper/rules/sdlc/logging/LoggingServicePrivate.hpp",
        "com/github/doevelopper/rules/sdlc/logging/LoggingService.cpp",
        "com/github/doevelopper/rules/sdlc/logging/LoggingService.hpp",
        "com/github/doevelopper/rules/sdlc/logging/Singleton.hpp",

        "com/github/doevelopper/rules/sdlc/app/AppInfo.hpp",
        "com/github/doevelopper/rules/sdlc/app/Application.cpp",
        "com/github/doevelopper/rules/sdlc/app/Application.hpp",
        "com/github/doevelopper/rules/sdlc/app/NoOp.cpp",
        "com/github/doevelopper/rules/sdlc/app/NoOp.hpp",
        "com/github/doevelopper/rules/sdlc/app/Notification.cpp",
        "com/github/doevelopper/rules/sdlc/app/Notification.hpp",
        "com/github/doevelopper/rules/sdlc/app/internal/ApplicationPrivate.hpp",
        "com/github/doevelopper/rules/sdlc/app/internal/ApplicationPrivate.cpp",
        # "com/github/doevelopper/rules/sdlc/app/Channel.hpp",
        # "com/github/doevelopper/rules/sdlc/app/Channel.cpp",
        # "com/github/doevelopper/rules/sdlc/app/ExecutionContext.hpp",
        # "com/github/doevelopper/rules/sdlc/app/ExecutionContext.cpp",
        # "com/github/doevelopper/rules/sdlc/app/Method.hpp",
        # "com/github/doevelopper/rules/sdlc/app/Method.cpp",
        # "com/github/doevelopper/rules/sdlc/app/MethodCaller.hpp",
        # "com/github/doevelopper/rules/sdlc/app/MethodCaller.cpp",
        "com/github/doevelopper/rules/sdlc/app/OptionDescription.hpp",
        "com/github/doevelopper/rules/sdlc/app/OptionDescription.cpp",
        "com/github/doevelopper/rules/sdlc/app/Plugin.hpp",
        "com/github/doevelopper/rules/sdlc/app/Plugin.cpp",
        "com/github/doevelopper/rules/sdlc/app/PluginInterface.hpp",
        "com/github/doevelopper/rules/sdlc/app/PluginInterface.cpp",
        "com/github/doevelopper/rules/sdlc/app/TimeoutGuard.hpp",
        "com/github/doevelopper/rules/sdlc/app/TimeoutGuard.cpp",
        "com/github/doevelopper/rules/sdlc/app/TimeSpan.hpp",
        "com/github/doevelopper/rules/sdlc/app/TimeSpan.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/AsyncPromise.hpp",
        "com/github/doevelopper/rules/sdlc/app/utils/AsyncPromise.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/AsyncRequest.hpp",
        "com/github/doevelopper/rules/sdlc/app/utils/AsyncRequest.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/AsyncTask.hpp",
        "com/github/doevelopper/rules/sdlc/app/utils/AsyncTask.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/MessageQueue.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/MessageQueue.hpp",
        "com/github/doevelopper/rules/sdlc/app/utils/Semaphore.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/Semaphore.hpp",
        "com/github/doevelopper/rules/sdlc/app/utils/SemaphoreLock.cpp",
        "com/github/doevelopper/rules/sdlc/app/utils/SemaphoreLock.hpp",

        "com/github/doevelopper/rules/sdlc/semver/GitRevision.hpp",
        "com/github/doevelopper/rules/sdlc/semver/Version.cpp",
        "com/github/doevelopper/rules/sdlc/semver/Version.hpp",
        "com/github/doevelopper/rules/sdlc/semver/Token.cpp",
        "com/github/doevelopper/rules/sdlc/semver/Token.hpp",
    ] + COMMON_SRCS + COMMON_HDRS + select({
        "@bazel_tools//src/conditions:windows": WIN32_SRCS + WIN32_HDRS,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_SRCS + LINUX_HDRS,
        "//conditions:default": [],
    }),

    defines =  COMMON_DEFINES + select({
        "@bazel_tools//src/conditions:windows": WIN32_DEFINES,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_DEFINES,
        "//conditions:default": [],
    }),

    copts = [
        "-DLOG_LEVEL=1",
    ] + select({
            "@bazel_tools//src/conditions:windows": [
                "/std:c++17"
            ],
            "//conditions:default": [
            "-D_REENTRANT",
          ],
    }),  #+ SHARED_LIBRARY_SUPPORT + DEFAULT_COPTS,

    features = select({
        "@bazel_tools//src/conditions:windows": ["windows_export_all_symbols"],
        "//conditions:default": [],
    }),

# #     # Uncomment this to enable full static link.
# #     # features = ['fully_static_link'],

    includes = [
        ".",
    ],

    linkopts = [
    #     # "-L$$EXT_BUILD_DEPS$$/log4cxx",
    #     # "-L$$EXT_BUILD_DEPS$$/org_apache_logging_log4cxx/copy_log4cxx/log4cxx/lib",
    ] + select({
        "@bazel_tools//src/conditions:windows": WIN32_LINKOPTS,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_LINKOPTS,
        "@bazel_tools//src/conditions:darwin": DARWIN_LINKOPTS,
    }),

    deps = [
        # "@com.github.doevelopper.rules-sdlc//src/main/resources/off_the_shelf_software/boost:boost",
        "@org_apache_log4cxx//:log4cxx",
        "@boost//:program_options",
        "@boost//:context",
        "@boost//:asio",
        "@boost//:variant",
        "@boost//:algorithm",
        "@boost//:filesystem",
        "@com_github_Tencent_rapidjson//:rapidjson",
    ] + select({
        "@bazel_tools//src/conditions:windows": [],
        "@bazel_tools//src/conditions:linux_x86_64": [],
        "@bazel_tools//src/conditions:darwin": [],
        "//conditions:default": [],
    }),
# #     # Comment this out to use system malloc runtime.
# #     # malloc = '@com_google_tcmalloc//tcmalloc'

    visibility = ["//visibility:public"],
)

cc_binary(
    name = "com.github.doevelopper.rules.sdlc.main.bin",
    srcs = [
        "main.cpp",
    ],

    deps = [
        ":com.github.doevelopper.rules.sdlc.main",
    ],

    # env = [
    #     $(location log4cxx) ,
    # ],

    visibility = ["//visibility:public"],
)
