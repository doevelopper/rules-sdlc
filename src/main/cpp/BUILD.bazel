
load(
    "@rules_cc//cc:defs.bzl",
    "cc_binary",
    "cc_library"
)

load(
    "@rules_pkg//:pkg.bzl",
    "pkg_tar",
    "pkg_deb",
    "pkg_zip"

)

cc_library(
    name = "rules-sdlc.std.main",
    srcs = [
        "rules/sdlc/std/API_Export.hpp",
        "rules/sdlc/std/app/AppInfo.hpp",
        "rules/sdlc/std/app/Application.cpp",
        "rules/sdlc/std/app/Application.hpp",
        "rules/sdlc/std/app/ApplicationPrivate.cpp",
        "rules/sdlc/std/app/ApplicationPrivate.hpp",
        "rules/sdlc/std/app/Channel.cpp",
        "rules/sdlc/std/app/Channel.hpp",
        "rules/sdlc/std/app/ExecutionContext.cpp",
        "rules/sdlc/std/app/ExecutionContext.hpp",
        "rules/sdlc/std/app/MethodCaller.cpp",
        "rules/sdlc/std/app/MethodCaller.hpp",
        "rules/sdlc/std/app/Method.cpp",
        "rules/sdlc/std/app/Method.hpp",
        "rules/sdlc/std/app/OptionDescription.cpp",
        "rules/sdlc/std/app/OptionDescription.hpp",
        "rules/sdlc/std/app/Plugin.cpp",
        "rules/sdlc/std/app/Plugin.hpp",
        "rules/sdlc/std/app/PluginInterface.cpp",
        "rules/sdlc/std/app/PluginInterface.hpp",
        "rules/sdlc/std/CompilerDetection.hpp",
        "rules/sdlc/std/Dummy.hpp",
        "rules/sdlc/std/Dummy.cpp",
        "rules/sdlc/std/logging/LoggingServicePrivate.hpp",
        "rules/sdlc/std/logging/LoggingServicePrivate.cpp",
        "rules/sdlc/std/logging/LoggingService.hpp",
        "rules/sdlc/std/logging/LoggingService.cpp",
        "rules/sdlc/std/PimplPtr.hpp",
        "rules/sdlc/std/PimplPtr.inl",
        "rules/sdlc/std/SharedPimplPtr.hpp",
        "rules/sdlc/std/SharedPimplPtr.inl",
        "rules/sdlc/std/semver/GitRevision.hpp",
        "rules/sdlc/std/semver/Version.hpp",
        "rules/sdlc/std/semver/Version.cpp",

    ],

    copts = [
        "-std=c++17",
        "-DLOG_LEVEL=1",
#         "-D_REENTRANT",
        "-I/usr/local/include/",
        "-fdiagnostics-color=always",
    ], #+ SHARED_LIBRARY_SUPPORT + DEFAULT_COPTS,

#     features = select({
#         #        ":windows": ["windows_export_all_symbols"],
#         "//conditions:default": [],
#     }),

    includes = [
        ".",
    ],

    linkopts = [
        "-L/usr/local/lib",
#         # "-lapr-1",
#         # "-laprutil-1",
#         # "-llog4cxx",
        # "-lboost_program_options",
#         # "-lboost_context",
#         # "-lxerces-c",
        # "-lssl",
        # "-lcrypto",
        # "-ldl",
        # "-lpthread",
    # ], # + FLAG_LINKOPTS,
        # "-lboost_thread",
        # "-lboost_system",
        # "-lboost_regex",
        # "-lboost_context",
        # "-lboost_date_time",
        # "-lboost_program_options",
        # "-lboost_filesystem",
        # "-lboost_signals2",
#     target_compatible_with = [
#         "@platforms//cpu:x86_64",
#         "@platforms//os:linux",
    ],

    deps = [
#     #     # "@com_google_absl//absl/strings",
#     #     # "@com_google_absl//absl/strings:str_format",
#     #     # "@com_google_absl//absl/debugging:failure_signal_handler",
#     #     # "@com_google_absl//absl/random",
#     #     # "@com_github_tencent_rapidjson//:rapidjson",
#     #     "@org_apache_apr//:apr",
#     #     "@com_github_libexpat//:expat",
#     #     "@org_apache_apr_util//:aprutil",
        "@org_apache_logging_log4cxx//:log4cxx",
        # "@com_github_nelhage_rules_boost//:boost_program_options",
        "@boost//:date_time",
        "@boost//:algorithm",
        "@boost//:program_options",
        "@boost//:asio",
        # "@boost//:asio_ssl",
        "@boost//:chrono",
        "@boost//:filesystem",
        "@boost//:locale",
        "@boost//:system",
        "@boost//:thread",
        "@boost//:signals2",
#     #     "@com_github_openssl//:openssl",
#     #     "@net_zlib_fossils//:zlib",
    ],

#     # Uncomment this to enable full static link.
#     # features = ['fully_static_link'],

#     # Comment this out to use system malloc runtime.
#     # malloc = '@com_google_tcmalloc//tcmalloc'

    visibility = ["//visibility:public"],
)

cc_binary(
    name = "rules-sdlc.bin",
    srcs = [
        "rules/sdlc/std/main.cpp",
    ],
    copts = [
        "-std=c++17",
        "-D_REENTRANT",
        "-I/usr/local/include/",
    ],
    includes = [
        ".",
    ],
    deps = [
        ":rules-sdlc.std.main",
    ],
    visibility = ["//visibility:public"],
)

# pkg_tar(
#     name = "rules-sdlc-exe",
#     strip_prefix = "/src",
#     package_dir = "/usr/bin",
#     srcs = [
        # "//src/main/cpp:rules-sdlc.bin",
        # ],
#     mode = "0755",
# )

# pkg_tar(
#     name = "rules-sdlc-libs",
#     strip_prefix = "/",
#     package_dir = "/usr/share/lib/rules-sdlc/tools",
#     srcs = [
#        "//src/main/cpp:rules-sdlc.std.main",
#    ],
#     mode = "0644",
# )

# pkg_tar(
#     name = "rules-sdlc",
#     extension = "tar.gz",
#     package_name = "my_package-${target_os}-${cpu}-${opt}",
#     deps = [
#         ":rules-sdlc-exe",
#         ":rules-sdlc-libs",
#     ],
    # srcs = [
    #     "README.txt",
    #     ":manpages",
    #     ":share_doc",
    #     "//resources/l10n:all",
    #     "//src/client:arch",
    #     "//src/server:arch",
    # ],
# )

# pkg_deb(
#     name = "deb",
#     data = ":content",
#     description = "My wonderful product",
#     maintainer = "someone@somewhere.com",
#     package = "mwp",
#     version = "3.14",
# )


# load(
#     "com.github.doevelopper.rules-sdlc//src/main/resources/starlark:Visibility.bzl",
#     "SHARED_LIBRARY_SUPPORT"
# )
#     visibility = ["//visibility:public"],
#     #visibility = ["//src/main/test:__pkg__"],
# )
