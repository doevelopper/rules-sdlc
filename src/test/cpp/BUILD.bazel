# #           Copyright (C) 2021 Adrien H.
# # All rights reserved.
# #
# # Redistribution and use in source and binary forms, with or without
# # modification, are permitted provided that the following conditions
# # are met:
# # 1. Redistributions of source code must retain the above copyright
# #    notice, this list of conditions and the following disclaimer.
# # 2. Redistributions in binary form must reproduce the above copyright
# #    notice, this list of conditions and the following disclaimer in the
# #    documentation and/or other materials provided with the distribution.
# #
# # THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# # ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# # OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# # SUCH DAMAGE.

# # Intentionally left empty (for now).

# load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
# load("@rules_pkg//:pkg.bzl", "pkg_tar", "pkg_deb")

# licenses(["notice"])  # Apache License

cc_library(
    name = "rules-sdlc.std.test",
    srcs = [
        "rules/sdlc/common/ConfigurableEventListener.hpp",
        "rules/sdlc/common/ConfigurableEventListener.cpp",
        "rules/sdlc/common/GTestEventListener.hpp",
        "rules/sdlc/common/GTestEventListener.cpp",
        "rules/sdlc/common/CustomEnvironment.hpp",
        "rules/sdlc/common/CustomEnvironment.cpp",
        "rules/sdlc/common/UnitTest.hpp",
        "rules/sdlc/common/UnitTest.cpp",
    ],

    copts = [
        "-D_REENTRANT",
        "-I/usr/local/include/",
    ],

    includes = [
        ".",
    ],

    linkopts = [
        "-L/usr/local/lib",

    ] + select({
        "@bazel_tools//src/conditions:windows": [],
        "@bazel_tools//src/conditions:linux_x86_64": ["-pthread"],
        "@bazel_tools//src/conditions:darwin": [],
    }),

    deps = [
        "//src/main/cpp:rules-sdlc.std.main",
        "@com_google_googletest//:gtest",
        "@org_apache_apr_util//:aprutil",
        "@org_apache_logging_log4cxx//:log4cxx",
        # "@com_github_tencent_rapidjson//:rapidjson",
        # "@com_google_absl//absl/strings",
        # "@com_google_googletest//:gtest",
        # "@org_apache_apr//:apr",
    ],

    visibility = ["//visibility:public"],
)

cc_test(
    name = "rules-sdlc.std.test.bin",
    srcs = [
        "rules/sdlc/common/unitTestRunner.cpp",
        "rules/sdlc/common/DummyTest.hpp",
        "rules/sdlc/common/DummyTest.cpp",
        "rules/sdlc/common/app/ApplicationTest.hpp",
        "rules/sdlc/common/app/ApplicationTest.cpp",
        "rules/sdlc/common/app/ChannelTest.hpp",
        "rules/sdlc/common/app/ChannelTest.cpp",
        "rules/sdlc/common/app/ExecutionContextTest.hpp",
        "rules/sdlc/common/app/ExecutionContextTest.cpp",
        "rules/sdlc/common/app/MethodCallerTest.hpp",
        "rules/sdlc/common/app/MethodCallerTest.cpp",
        "rules/sdlc/common/app/MethodTest.hpp",
        "rules/sdlc/common/app/MethodTest.cpp",
        "rules/sdlc/common/app/OptionDescriptionTest.hpp",
        "rules/sdlc/common/app/OptionDescriptionTest.cpp",
        "rules/sdlc/common/app/PluginTest.hpp",
        "rules/sdlc/common/app/PluginTest.cpp",
        "rules/sdlc/common/semver/VersionTest.hpp",
        "rules/sdlc/common/semver/VersionTest.cpp",
    ],

    includes = [
        ".",
    ],

    linkopts = [
        "-L/usr/local/lib",
        "-pthread",
        "-lrt",
        "-luuid", #avoid having libapr-1.a(rand.o):rand.c:function apr_os_uuid_get: error: undefined reference to 'uuid_generate'
    ] + select({
        "@bazel_tools//src/conditions:windows": [],
        "@bazel_tools//src/conditions:linux_x86_64": [],
        "@bazel_tools//src/conditions:darwin": [],
    }),

    deps = [
        "//src/test/cpp:rules-sdlc.std.test",
    ],

    args = [
        "--use_xxx",
        "",
        "--iterration=42"
    ],

# #     shard_count = 1,
# #     # data = [
# #     #     "//src/main/resources/configs/log4cxx.xml",
#     # ],
)
