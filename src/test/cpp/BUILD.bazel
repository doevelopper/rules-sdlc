#           Copyright (C) 2021 Adrien H.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# Intentionally left empty (for now).

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@rules_pkg//:pkg.bzl", "pkg_tar", "pkg_deb")

licenses(["notice"])  # Apache License

# cc_library(
#     name = "rules-sdlc-test",
#     srcs = [
# #         "project/object/model/extra/ConfigurableEventListener.hpp",
# #         "project/object/model/extra/ConfigurableEventListener.cpp",
# #         "project/object/model/extra/GTestEventListener.hpp",
# #         "project/object/model/extra/GTestEventListener.cpp",
#         # "project/object/model/extra/CustomEnvironment.hpp",
#         # "project/object/model/extra/CustomEnvironment.cpp",
#         "rules/sdlc/std/Test.hpp",
#         "rules/sdlc/std/Test.cpp",
#     ],
#     copts = [
#         "-D_REENTRANT",
#         "-I/usr/local/include/",
#     ],
#     includes = [
#         ".",
#     ],
# # #     linkopts = [
# # #         "-L/usr/local/lib",
# # #         "-pthread",
# # #     ],
#     deps = [
#         "//src/main/cpp:rules-sdlc.std.main",
#         "@com_google_googletest//:gtest",
#         "@org_apache_logging_log4cxx//:log4cxx",
#     ],
#     visibility = ["//visibility:public"],
# )

cc_test(
    name = "rules-sdlc-test.bin",
    srcs = [
      "rules/sdlc/std/unitTestRunner.cpp",
#         "project/object/model/unitTest.cpp",
#         "project/object/model/DummyTest.hpp",
#         "project/object/model/DummyTest.cpp",
    ],
#     linkopts = [
#         "-pthread",
#          "-lrt",
#     ],
#     deps = [
#         "//src/test/cpp:pom.test.utils",
#         "//src/main/cpp:pom.main",
#         "@com_github_tencent_rapidjson//:rapidjson",
#         "@com_google_absl//absl/strings",
#         # "//src/main/cpp:pom.lib.main",
#         # "@com_google_googletest//:gtest",
#         # "@org_apache_apr//:apr",
#         # "@org_apache_logging_log4cxx//:log4cxx",
#     ],
#     args = [
#         "--use_xxx",
#         "",
#         "--iterration=42"
#     ],
#     shard_count = 1,
#     # data = [
#     #     "//src/main/resources/configs/log4cxx.xml",
#     # ],
)
