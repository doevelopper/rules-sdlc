#
#       workflow.yml
#
#       Copyright (C) 2014 - 2021  The CFS SW Platform Development Team.
#                        All rights reserved.
#
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    "Software"), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sublicense, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject to
#    the following conditions:
#
#    The above copyright notice and this permission notice shall be
#    included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#

name: GitHub Actions
on:
  push:
    branches: [ main, master, feature/**, releases/**, rc/**, fix/** ]
    # tags: [ 'v*.*.*' ]
    # tags:
    #   - "v*.*.*" # on every version tag will build a new android artifact.
    # branches-ignore: [ poc/**]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'AUTHORS'
  pull_request:
    branches: [ develop, releases/v* ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'AUTHORS'
  workflow_dispatch:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'AUTHORS'
  schedule:
    - cron: '30 23 * * TUE'
    # - cron: '0 0 12 ? * THU'

env:
  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IS_MASTER: ${{ contains(github.ref, 'master') }}
  DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
  BAZEL_TARGET: ${{ github.event.inputs.target }}
  BAZEL_RUNS_PER_TEST: ${{ github.event.inputs.runs_per_test }}
  REGISTRY: docker.io
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: doevelopper/cfs-dev-tools-common:latest
  buildDir: '${{ github.workspace }}/build'

jobs:
  end-2-end:
    name: Bazel End to ent build test package and archive
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    # continue-on-error: ${{ matrix.ignore-errors }}
    # container: doevelopper/cfs-dev-tools-common:latest
    strategy:
      fail-fast: false
      matrix:
        # arch: ["Win64", "x64", "ARM64"]
        # target: [ linux-x64, linux-armv8-64]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        build_type: ["Debug", "Release"]
        # lib_type: ["static", "shared"]
        include:
          - os: ubuntu-latest
            compiler: clang
            compiler-version: 11
            ignore-errors: false
            # This compiler is supported only on a best-effort basis
            ignore-errors: true
            pip-path: ~/.cache/pip
            bzl-path: ~/.cache/bazel
          - os: macos-latest
            compiler: gcc
            compiler-version: 10
            ignore-errors: false
            pip-path: ~/Library/Caches/pip
            bzl-path: ~/Library/Caches/bazel
          - os: windows-latest
            pip-path: ~\AppData\Local\pip\Cache
            bzl-path: ~\AppData\Local\bazel\Cache
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%d-%m-%Y_%H-%M-%S.%3N')"

      - name: Test with variables
        run: echo $TAG_NAME - $RELEASE_NAME
        env:
          TAG_NAME: nightly-tag-${{ steps.date.outputs.date }}
          RELEASE_NAME: nightly-release-${{ steps.date.outputs.date }}

      - name: List directory ${{ matrix.os }} ${{ matrix.build_type }} ${{ matrix.lib_type }}
        run: |
          ls ${{ github.workspace }}

      - name: Configure git to preserve line endings
        # Otherwise, tests fail on Windows because "golden" test outputs will not
        # have the correct line endings.
        run: git config --global core.autocrlf false

      # - uses: actions/checkout@v2
      # # - name: set up JDK 1.8
      # #   uses: actions/setup-java@v1
      # #   with:
      # #     java-version: 1.8
      # - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      # - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}

      - uses: actions/checkout@v2
      - uses: bazelbuild/setup-bazelisk@v1
      - name: Mount Bazel Cache
        uses: actions/cache@v1
        with:
          path: ${{ matrix.bzl-path }}
          key: ${{ runner.os }}-bazel-${{ hashFiles('WORKSPACE') }}
          restore-keys: ${{ runner.os }}-bazel-

      # - name: Install bazelisk on Linux system
      #   if: matrix.os == 'Linux'
      #   run: |
      #     curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-linux-amd64"
      #     mkdir -p "${GITHUB_WORKSPACE}/bin/"
      #     mv bazelisk-linux-amd64 "${GITHUB_WORKSPACE}/bin/bazel"
      #     chmod +x "${GITHUB_WORKSPACE}/bin/bazel"

      - name: Verify Bazel Installation
        if: matrix.os != 'windows'
        run: bazel -h
      # # - name: Install dependencies via apt
      # #   run: sudo apt-get install python3-dev python3-distutils python3-dev python-is-python3 libtinfo5
      # - name: Install/configure Clang compiler toolchain
      #   if: matrix.compiler == 'clang'
      #   run: |
      #     sudo apt-get install -qy clang-${{matrix.compiler-version}}
      #     echo "CXX=clang++-${{matrix.compiler-version}}" >> $GITHUB_ENV
      #     echo "CC=clang-${{matrix.compiler-version}}" >> $GITHUB_ENV

      # - name: Install/configure GCC compiler toolchain
      #   if: matrix.compiler == 'gcc'
      #   run: |
      #     sudo apt-get install -qy g++-${{matrix.compiler-version}}
      #     echo "CXX=g++-${{matrix.compiler-version}}" >> $GITHUB_ENV
      #     echo "CC=gcc-${{matrix.compiler-version}}" >> $GITHUB_ENV

      # - name: Get specific version CMake, v3.21.1
      #   uses: lukka/get-cmake@v3.21.1

      # - name: Build
      #   run: |
      #     "${GITHUB_WORKSPACE}/bin/bazel" build --nobuild //...

      # - name: Unit Test
      #   run: |
      #     "${GITHUB_WORKSPACE}/bin/bazel" test --nobuild //...

      # - name: Bazel Test Target (opt)
      #   run: |
      #     "${GITHUB_WORKSPACE}/bin/bazel" test -c opt --test_output=all --runs_per_test=$BAZEL_RUNS_PER_TEST -- $BAZEL_TARGET

      # - uses: actions/upload-artifact@v1.0.0  #actions/upload-artifact@v2
      #   with:
      #     name: filament-linux
      #     path: out/${{ github.repository }}.${{ runner.os }}.tar.gz

      # - name: Archive results
      #   if: ${{ success() || failure() }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ github.repository }}.${{ runner.os }}-${{ matrix.target }}
      #     path: |
      #       report.html
      #       log.html
      #       robot_output.xml
      #       snapshots

      # - run: echo "üçè This job's status is ${{ job.status }}."

  # clang-build-end-2-end:
  #   name: Bazel Test All (opt) usinh CLANG
  #   timeout-minutes: 60
  #   # container: doevelopper/cfs-dev-tools-common:latest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     # - name: set up JDK 1.8
  #     #   uses: actions/setup-java@v1
  #     #   with:
  #     #     java-version: 1.8
  #     - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
  #     - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
  #     - name: List files in the repository
  #       run: |
  #         ls ${{ github.workspace }}

  #     - name: Mount Bazel Cache
  #       uses: actions/cache@v1
  #       with:
  #         path: "~/.cache/bazel"
  #         key: ${{ runner.os }}-bazel-${{ hashFiles('WORKSPACE') }}
  #         restore-keys: ${{ runner.os }}-bazel

  #     - name: Install bazelisk
  #       run: |
  #         curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-linux-amd64"
  #         mkdir -p "${GITHUB_WORKSPACE}/bin/"
  #         mv bazelisk-linux-amd64 "${GITHUB_WORKSPACE}/bin/bazel"
  #         chmod +x "${GITHUB_WORKSPACE}/bin/bazel"

  #     # - name: Install dependencies via apt
  #     #   run: sudo apt-get install python3-dev python3-distutils python3-dev python-is-python3 libtinfo5

  #     - name: Build
  #       run: |
  #         "${GITHUB_WORKSPACE}/bin/bazel" build --nobuild //...

  #     - name: Unit Test
  #       run: |
  #         "${GITHUB_WORKSPACE}/bin/bazel" test --nobuild //...

  #     # - name: Bazel Test Target (opt)
  #     #   run: |
  #     #     "${GITHUB_WORKSPACE}/bin/bazel" test -c opt --test_output=all --runs_per_test=$BAZEL_RUNS_PER_TEST -- $BAZEL_TARGET

  #     # - uses: actions/upload-artifact@v1.0.0
  #     #   with:
  #     #     name: filament-linux
  #     #     path: out/filament-release-linux.tgz

  #     - run: echo "üçè This job's status is ${{ job.status }}."


  # Explore-GitHub-Actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
  #     - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
  #     - name: List files in the repository
  #       run: |
  #         ls ${{ github.workspace }}
  #     - run: echo "üçè This job's status is ${{ job.status }}."


  # gcc-compile:
  # clang-compile:

  # gcc-compile-test:
  #   needs: gcc-compile

  # clang-compile-test:
  #   needs: clang-compile


  # clang-cppcheck-analyzer:
  # clang-clang-tidy-analyzer:

  # gcc-coverage:
  #   needs: gcc-compile-test

  # clang-coverage:
  #   needs: clang-compile-test

  # üì±-online-sonar-continuous-code-quality:
  # https://docs.sonarqube.org/latest/analysis/coverage/
  #  build-wrapper-macosx-x86 --out-dir bw bazel --batch build --spawn_strategy=local --strategy=Genrule=local --bazelrc=/dev/null //cfs-utils:cfs-utils-main
  #    sonar.cfamily.gcov.reportsPath  : gcc
  #    sonar.cfamily.llvm-cov.reportPath: clang
  #    sonar.cfamily.vscoveragexml.reportsPath: vstudio
  #    sonar.cfamily.bullseye.reportPath : bullseye
  # üì±-online-coverity-code-analysis:
  # üì±-online-coveralls-code-analysis:
  # üì±-clang-security-application-linter:

  # Build:
  #   runs-on: doevelopper/cfs-dev-tools-common:latest

  # Test:
  #   runs-on: doevelopper/cfs-dev-tools-common:latest

  # Deploy:
  #   runs-on: doevelopper/cfs-dev-tools-common:latest
  # clang-format-style:
  # runs-on: ubuntu-latest
  # steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       path: src
  #        ref: ${{ github.event.inputs.ref || github.ref }}
  #        fetch-depth: 2
  #   # - name: Apply style
  #   #   ls ${{ github.workspace }}
