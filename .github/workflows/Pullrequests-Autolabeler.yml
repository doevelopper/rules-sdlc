name: PR Generate Labels
on:
  # Use pull_request_target to gain write permissions.
  # Ref: https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/
  pull_request_target:
    types: [ opened, reopened, synchronize ]
    paths:
      - '.github/**'
      - '.gitlab/**'
      - 'src/main/resources/**'
      - 'src/test/resources/**'
      - 'src/site/md/docs/**'
      - 'src/it/**'
      - 'src/site/refs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  AutoLabelPR:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0
        with:
          script: |
            let newComponentLabels = new Set(); // Set of new label strings

            // Fetch files modified in the PR
            const pulledFiles = await github.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Identify new component labels based on the files modified in the PR
            for (const f of pulledFiles['data']) {
              switch (true) {
                case /^\.github\/workflows\/.*/.test(f.filename):
                case /^\.gitlab/ci\/.*/.test(f.filename):
                  console.log("file changed under CI component : " + f['filename']);
                  newComponentLabels.add("component: ci");
                  break;
                case /^docs\/.*/.test(f.filename):
                  console.log("file changed under DOCS: " + f['filename']);
                  newComponentLabels.add("component: docs");
                  break;
                case /^dp\/.*/.test(f.filename):
                  console.log("file changed under DP component: " + f['filename']);
                  newComponentLabels.add("component: dp");
                  break;
              } // end of switch case
            } // end of for loop

            const curLblObjs = await github.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Delete current component labels from PR that are no more valid
            for (const l of curLblObjs['data']) {
              //console.log("Current LabelName: " + l['name'] + " LabelDescription: " + l['description']);
              if(l['name'].startsWith("component: "))  {
                if(newComponentLabels.has(l['name']))  {
                  newComponentLabels.delete(l['name']);
                }
                else  {
                  github.issues.removeLabel({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: l['name'],
                  });
                }
              } // end of if block
            } // end of for loop

            if( newComponentLabels.size == 0 )  {
              console.log("No new component files changed in this PR: " + context.issue.number);
            }
            else  {
              let uniqLbls = Array.from(newComponentLabels);
              github.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: uniqLbls,
              });
            } // end of else block
