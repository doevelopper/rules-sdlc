#
#       .github/workflows/ContinuousTesting-Linux.yml
#
#       Copyright (C) 2014 - 2021  The CFS SW Platform Development Team.
#                        All rights reserved.
#
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    "Software"), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sublicense, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject to
#    the following conditions:
#
#    The above copyright notice and this permission notice shall be
#    included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#

# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

#  Automatically release to production


name: üêßüêß Continuous Deployment

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master, develop, release/**]
  pull_request:
    branches: [ main, master, develop, release/**]

env:
  REPO_NAME: ${{ github.repository }}
  EVENT_NAME: ${{ github.event_name }}

jobs:
  Lint-and-check-style:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - name: Build binaries
        run: |
          echo "rules-$(git describe --tags)-linux-amd64"  "-X main.Version=$(git describe --tags)"
          export GPG_EMAIL="ahl@acme.org"
          find . -name '*.nbm' -exec gpg -u $GPG_EMAIL --armor --output {}.asc --detach-sig {} \;
          find . -name '*.xml' -exec gpg -u $GPG_EMAIL --armor --output {}.asc --detach-sig {} \;
          find . -name '*.pom' -exec gpg -u $GPG_EMAIL --armor --output {}.asc --detach-sig {} \;
          find . -name '*.sha1' -exec gpg -u $GPG_EMAIL --armor --output {}.asc --detach-sig {} \;
          find . -name '*.md5' -exec gpg -u $GPG_EMAIL --armor --output {}.asc --detach-sig {} \;
          find . -name '*.jar' -exec gpg -u $GPG_EMAIL --armor --output {}.asc --detach-sig {} \;

      - name: Upload release artifacts
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs").promises;
            const { repo: { owner, repo }, sha } = context;
            const release = await github.repos.getReleaseByTag({
              owner, repo,
              tag: process.env.GITHUB_REF.replace("refs/tags/", ""),
            });
            console.log("Release:", { release });
            for (let file of await fs.readdir(".")) {
              if (!file.startsWith("rules-")) continue;
              console.log("Uploading", file);
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(file),
              });
            }
