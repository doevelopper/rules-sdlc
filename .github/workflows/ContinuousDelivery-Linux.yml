#
#       .github/workflows/ContinuousTesting-Linux.yml
#
#       Copyright (C) 2014 - 2021  The CFS SW Platform Development Team.
#                        All rights reserved.
#
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    "Software"), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sublicense, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject to
#    the following conditions:
#
#    The above copyright notice and this permission notice shall be
#    included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#

# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

#  Automatically release to repository


name: 🐧🐧 Continuous Delivery

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    # branches: [ main, master, release/**]
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
  # pull_request:
  #   branches: [ main, master, release/**]

env:
  REPO_NAME: ${{ github.repository }}
  EVENT_NAME: ${{ github.event_name }}

jobs:
  Lint-and-check-style:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      -
        # if: contains(github.head_ref, 'feature') || contains(github.head_ref, 'release')
        # if: contains(github.base_ref, 'staging') || contains(github.base_ref, 'production')
        name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: '0'

  build:
    name: Check Documentation
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'documentation') }}
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Checkout Release from lens
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Using Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Generate Extensions API Reference using typedocs
        run: |
          yarn install
          yarn typedocs-extensions-api

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build
    steps:
    -
      name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    -
      name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    -
      uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      # - name: Build docs
      #   shell: bash
      #   run: |
      #     cd docs
      #     sphinx-build -b html -D language=${DOCS_LANGUAGE} -a -n -T -W --keep-going . _build/html
      #   env:
      #     DOCS_LANGUAGE: ${{ matrix.language }}

  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      rules_version: ${{ env.RULES_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RULES_VERSION == ''
        run: |
          echo "RULES_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RULES_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RULES_VERSION }}
          release_name: ${{ env.RULES_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Build release asset
      shell: bash
      run: |
        staging="bazelci_${{ needs.create-release.outputs.rules_version }}"
        cp -r rules "$staging"
        tar czf "$staging.tar.gz" "$staging"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
