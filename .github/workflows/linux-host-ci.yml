#
#       workflow.yml
#
#       Copyright (C) 2014 - 2021  The CFS SW Platform Development Team.
#                        All rights reserved.
#
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    "Software"), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sublicense, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject to
#    the following conditions:
#
#    The above copyright notice and this permission notice shall be
#    included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#

name: GitHub CI Linux
on:
  push:
    branches: [feature/**,  hotfix/**, bugfix/**, support/** ]
    # tags: [ 'v*.*.*' ]
    # tags:
    #   - "v*.*.*" # on every version tag will build a new android artifact.
    # branches-ignore: [ poc/**]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'AUTHORS'
  pull_request:
    branches: [ main, master, develop, releases/v*, releases/**, rc/** ]
    # types: [ opened, synchronize, closed ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'AUTHORS'
  workflow_dispatch:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'CODE_OF_CONDUCT.md'
      - 'AUTHORS'
  schedule:
    - cron: '30 23 * * TUE'
    # - cron: '0 0 12 ? * THU'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IS_MASTER: ${{ contains(github.ref, 'master') }}
  DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
  BAZEL_TARGET: ${{ github.event.inputs.target }}
  BAZEL_RUNS_PER_TEST: ${{ github.event.inputs.runs_per_test }}
  REPO_NAME: ${{ github.repository }}
  EVENT_NAME: ${{ github.event_name }}
  REGISTRY: docker.io
  IMAGE_NAME: doevelopper/cfs-dev-tools-common:latest
  buildDir: '${{ github.workspace }}/build'
  LOG4CXX_CONFIGURATION: ${{ github.workspace }}/src/main/resources/configs/log4cxx.xml

jobs:
  bazel-end-2-end-build-on-vm:
    runs-on: ubuntu-latest
    timeout-minutes: 600
    steps:
      - name: Dependencies [Ubuntu]
        # if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y git build-essential pkg-config zip unzip zlib1g-dev cmake wget curl autoconf \
                              autogen automake make libtool mlocate xz-utils autotools-dev
      - name: Display environment variables
        shell: bash
        run: env

      - name: Install bazelisk
        run: |
          curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-linux-amd64"
          mkdir -p "${GITHUB_WORKSPACE}/bin/"
          mv bazelisk-linux-amd64 "${GITHUB_WORKSPACE}/bin/bazel"
          chmod +x "${GITHUB_WORKSPACE}/bin/bazel"

      - uses: actions/checkout@v2
      - name: Mount Bazel Cache
        uses: actions/cache@v1
        with:
          path: "~/.cache/bazel"
          key: bazel

      - name: build google benchmark
        run: bazelisk build @com_github_google_benchmark//:benchmark --client_env=CC=gcc --client_env=CXX=g++  --cxxopt=-std=c++17 --host_cxxopt=-std=c++17 --client_env=BAZEL_CXXOPTS=-std=c++17 --disk_cache=~/.cache/bazel

      - name: build google test
        run: bazelisk build @com_google_googletest//... --client_env=CC=gcc --client_env=CXX=g++  --cxxopt=-std=c++17 --host_cxxopt=-std=c++17 --client_env=BAZEL_CXXOPTS=-std=c++17 --disk_cache=~/.cache/bazel

  # bazel-end-2-end-build-on-container:
  #   runs-on: ubuntu-latest
  #   container: doevelopper/cfs-dev-tools-common:latest
  #   timeout-minutes: 60
  #   strategy:
  #     matrix:
  #       include:
  #         - { CC: gcc, CXX: g++ }
  #         - { CC: clang, CXX: clang++ }
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Mount ${{ github.repository }} 's bazel Cache
  #       uses: actions/cache@v1
  #       with:
  #         path: "~/.cache/bazel-${{ matrix.CC }}"
  #         key: bazel-${{ matrix.CC }}-${{ runner.os }}-${{ hashFiles('WORKSPACE') }}
  #         restore-keys: bazel-${{ matrix.CC }}-${{ runner.os }}
  #     - name: Display environment variables
  #       shell: bash
  #       run: env
  #     - run: |
  #         echo This job does specify a container.
  #         echo It runs in the container instead of the VM.
  #         cmake --version
  #         doxygen --version
  #         uncrustify --version
  #         cppcheck --version
  #         make --version
  #         mvn --version
  #         gradle -v
  #         bazel version
  #         conan --version || true
  #         gdb --version
  #         java -version
  #         clang --version
  #         clang-format --version
  #         clang-tidy -version
  #         gcc --version
  #       name: Run in container
  #     - name: Build ${{ github.repository }} project (${{ github.ref }})
  #       env:
  #         CC: ${{ matrix.CC }}
  #         CXX: ${{ matrix.CXX }}
  #       run: bazel build --cxxopt=-std=c++17 --host_cxxopt=-std=c++17 --client_env=BAZEL_CXXOPTS=-std=c++17 //... --client_env=CC=${{ matrix.CC }} --client_env=Cxx=${{ matrix.CXX }}
