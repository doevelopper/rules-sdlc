#
#       .github/workflows/ContinuousTesting-Linux.yml
#
#       Copyright (C) 2014 - 2021  The CFS SW Platform Development Team.
#                        All rights reserved.
#
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    "Software"), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sublicense, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject to
#    the following conditions:
#
#    The above copyright notice and this permission notice shall be
#    included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#

# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: 🐧🐧 Continuous Integration

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }} # group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master, develop, feature/**, bugfix/**, hotfix/**, support/** ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'src/main/resources/**'
      - 'src/test/resources/**'
      - 'src/site/**'
    # - '.github/workflows/**'
    # tags: [ 'v*.*.*' ] # Workflow run on tags for vx.x.x only.
    # tags:
    #   - "v*.*.*" # on every version tag will build a new android artifact.
    # branches-ignore: [ poc/**]
    tags-ignore:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master, develop, feature/**, bugfix/**, hotfix/**, support/** ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'src/main/resources/**'
      - 'src/test/resources/**'
      - 'src/site/**'
  # pull_request_target:
  #   types: [ opened, synchronize, reopened, ready_for_review, edited ]
    tags-ignore:
      - 'v*.*.*'
  schedule:
    - cron: '31 0 * * 1'
    # - cron: '0 0 * * *' # Nightly build

env:
  BZL_CACHE: ${{ github.workspace }}/.cache/bazel
  BZL_OUTPUT: ${{ github.workspace }}/bazel/output
  BUILD_DIR: '${{ github.workspace }}/build'
  BUILD_TYPE: Release
  CCACHE_BASEDIR: ${{github.workspace}}
  CCACHE_DIR: '${{ github.workspace }}/ccache'
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_MAXSIZE: 5G
  CCACHE_VERSION: 4.5
  CLANG_VERSION: 130
  CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
  CMAKE_VERSION: 3.21.1
  NINJA_VERSION: 1.10.2
  ELFUTILS_VERSION: 0.175
  EVENT_NAME: ${{ github.event_name }}
  LOG4CXX_CONFIGURATION: ${{ github.workspace }}/src/main/resources/configs/log4cxx.xml
  REPO_NAME: ${{ github.repository }}
  RUN_ID: ${{ github.run_id }}-${{ github.run_number }}
  QT_VERSION: 6.2.3
  QTEST_FUNCTION_TIMEOUT: 60000
  QT_MIRRORS: download.qt.io;mirrors.ocf.berkeley.edu/qt;ftp.fau.de/qtproject;mirror.bit.edu.cn/qtproject
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  check-style:
    timeout-minutes: 10
    name: ${{ github.repository }} Coding style checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    # if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

  cpplint:
    timeout-minutes: 10
    name: ${{ github.repository }} Static code checker for C++
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
    - run: pip install cpplint
    - run: cpplint --recursive .

  cpp-linter:
    name: ${{ github.repository }} C/C++ Lint Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: shenxianpeng/cpp-linter-action@master
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file

      -
        name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
        # for actual deployment
        # run: exit 1

  pythonlint:
    timeout-minutes: 10
    name: ${{ github.repository }} Python Linter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - uses: weibullguy/python-lint-plus@master
        with:
          python-root-list: "python_alelo tests"
          use-black: false
          use-yapf: false
          use-isort: false
          use-docformatter: false
          use-pycodestyle: false
          use-pydocstyle: false
          use-mypy: false
          use-pylint: false
          use-flake8: false
          use-mccabe: false
          use-radon: false
          use-rstcheck: false
          use-check-manifest: false
          use-pyroma: false
          extra-black-options: ""
          extra-yapf-options: ""
          extra-isort-options: ""
          extra-docformatter-options: ""
          extra-pycodestyle-options: ""
          extra-pydocstyle-options: ""
          extra-mypy-options: ""
          extra-pylint-options: ""
          extra-flake8-options: ""
          extra-mccabe-options: ""
          extra-radon-options: ""
          extra-rstcheck-options: ""
          extra-manifest-options: ""
          extra-pyroma-options: ""

  shelllint:
    name: ${{ github.repository }} Shell scripts Linter
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v1
      -
        name: Run ShellCheck
        uses: azohra/shell-linter@latest

  workflowslint:
    runs-on: ubuntu-latest
    name: ${{ github.repository }}  GitHub Actions workflow linter
    steps:
      - uses: actions/checkout@v2
      - uses: cschleiden/actions-linter@v1
        with:
          workflows: '[".github/workflows/*.yaml"]'

  gherkinlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      -
        name: gherkin-lint
        uses: nhatthm/gherkin-lint-action@v1
        with:
          # Optional: Version of gherkin-lint to use in the `npm install -g gherkin-lint` command. Default to `latest`.
          # version: latest

          # Optional: Comma separated list of feature files/glob patterns. Default to current working directory.
          feature_files: features/*

          # Optional: Use a custom configuration file instead of the default one.
          # config_file: .gherkin-lintrc

          # Optional: Output format. Possible values: json, stylish, xunit. Default to `stylish`.
          # format: stylish

          # Optional: Comma seperated list of files/glob patterns that the linter should ignore, overrides .gherkin-lintignore file
          # ignore:

          # Optional: Comma seperated list of additional rule directories
          # rule_dirs:

  lint-pull-request-title:
    runs-on: ubuntu-latest
    steps:
      -
        name: Lint pull request title
        uses: matthiashermsen/lint-pull-request-title@v1.0.0
        with:
          allowed-pull-request-types: chore,feat,fix,Docs,Style,cosmetic,Refactor,Add,Remove,Change,test,wip
