#
#       .github/workflows/ContinuousTesting-Linux.yml
#
#       Copyright (C) 2014 - 2021  The CFS SW Platform Development Team.
#                        All rights reserved.
#
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    "Software"), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sublicense, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject to
#    the following conditions:
#
#    The above copyright notice and this permission notice shall be
#    included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#

# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: 🐧🐧 Continuous Integration

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }} #${{ github.workflow }}-${{ github.ref }} # group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master, develop, feature/**, bugfix/**, hotfix/**, support/** ]
    paths-ignore:
      - '**.md'
      # - 'docs/**'
      # - 'src/main/resources/**'
      # - 'src/test/resources/**'
      # - 'src/site/**'
    # - '.github/workflows/**'
    # tags: [ 'v*.*.*' ] # Workflow run on tags for vx.x.x only.
    # tags:
    #   - "v*.*.*" # on every version tag will build a new android artifact.
    # branches-ignore: [ poc/**]
    # tags-ignore:
    #   - 'v*.*.*'
  pull_request:
    branches: [ main, master, develop, feature/**, bugfix/**, hotfix/**, support/** ]
    paths-ignore:
      - '**.md'
      # - 'docs/**'
      # - 'src/main/resources/**'
      # - 'src/test/resources/**'
      # - 'src/site/**'
  # pull_request_target:
  #   types: [ opened, synchronize, reopened, ready_for_review, edited ]
  #   tags-ignore:
  #     - 'v*.*.*'
  # schedule:
  #   - cron: '31 0 * * 1'
  #   # - cron: '0 0 * * *' # Nightly build

env:
  BZL_CACHE: ${{ github.workspace }}/.cache/bazel
  BZL_OUTPUT: ${{ github.workspace }}/bazel/output
  BUILD_DIR: '${{ github.workspace }}/build'
  BUILD_TYPE: Release
  CCACHE_BASEDIR: ${{github.workspace}}
  CCACHE_DIR: '${{ github.workspace }}/ccache'
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_MAXSIZE: 5G
  CCACHE_VERSION: 4.5
  CI_TASK_DIR: ${{ github.workspace }}
  CI_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
  CLANG_VERSION: 130
  CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
  CMAKE_VERSION: 3.21.1
  NINJA_VERSION: 1.10.2
  ELFUTILS_VERSION: 0.175
  EVENT_NAME: ${{ github.event_name }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_USERNAME: ${{ github.actor }}
  INSTALL_PREFIX: ${{ github.workspace }}/install
  LOG4CXX_CONFIGURATION: ${{ github.workspace }}/src/main/resources/configs/log4cxx.xml
  REPO_NAME: ${{ github.repository }}
  RUN_ID: ${{ github.run_id }}-${{ github.run_number }}
  QT_VERSION: 6.2.3
  QTEST_FUNCTION_TIMEOUT: 60000
  QT_MIRRORS: download.qt.io;mirrors.ocf.berkeley.edu/qt;ftp.fau.de/qtproject;mirror.bit.edu.cn/qtproject
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}


jobs:
  # This action can only be invoked in 'pull_request' events. Otherwise the pull request can't be inferred.
  # lint-pull-request-title:
  #   if: ${{ github.event.workflow_run.event == 'pull_request' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Lint pull request title
  #       uses: matthiashermsen/lint-pull-request-title@v1.0.0
  #       with:
  #         allowed-pull-request-types: chore,feat,fix,Docs,Style,cosmetic,Refactor,Add,Remove,Change,test,wip

  workflows-lint:
    runs-on: ubuntu-latest
    name: ${{ github.repository }}  GitHub Actions workflow linter
    steps:
      - uses: actions/checkout@v2
      - uses: cschleiden/actions-linter@v1
        with:
          workflows: '[".github/workflows/*.yaml"]'

  check-style:
    needs: [workflows-lint]
    timeout-minutes: 10
    name: ${{ github.repository }} Coding style checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    # if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    # runs-on: >-
    #     ${{ (
    #     (
    #       github.event_name == 'push' ||
    #       github.event_name == 'schedule' ||
    #       contains(fromJSON('[
    #         "doevelopper",
    #         "ahl",
    #       ]'), github.event.pull_request.user.login)
    #     ) && github.repository == 'doevelopper/rules-sdlc'
    #     ) && 'self-hosted' || 'ubuntu-20.04' }}
    steps:
      -
        name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          submodules: 'recursive'
          fetch-depth: '0'

  cpp-lint:
    needs: [check-style]
    timeout-minutes: 10
    name: ${{ github.repository }} Static code checker for C++
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - run: pip install cpplint cpplint-junit  tox tox-gh-actions
        #cpplint --recursive src/main/cpp/rules/sdlc/std/app > ${{ github.workspace }}/lint.xml 2>&1
        #cpplint_junit ${{ github.workspace }}/cpplint.txt ${{ github.workspace }}/cpplint-2-junit.xml

    # - run: |

  cpp-linter:
    needs: [check-style]
    name: ${{ github.repository }} C/C++ Lint Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: shenxianpeng/cpp-linter-action@master
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file

      -
        name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
        # for actual deployment
        # run: exit 1

  python-lint:
    needs: [check-style]
    timeout-minutes: 10
    name: ${{ github.repository }} Python Linter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - uses: weibullguy/python-lint-plus@master
        with:
          python-root-list: "python_alelo tests"
          use-black: false
          use-yapf: false
          use-isort: false
          use-docformatter: false
          use-pycodestyle: false
          use-pydocstyle: false
          use-mypy: false
          use-pylint: false
          use-flake8: false
          use-mccabe: false
          use-radon: false
          use-rstcheck: false
          use-check-manifest: false
          use-pyroma: false
          extra-black-options: ""
          extra-yapf-options: ""
          extra-isort-options: ""
          extra-docformatter-options: ""
          extra-pycodestyle-options: ""
          extra-pydocstyle-options: ""
          extra-mypy-options: ""
          extra-pylint-options: ""
          extra-flake8-options: ""
          extra-mccabe-options: ""
          extra-radon-options: ""
          extra-rstcheck-options: ""
          extra-manifest-options: ""
          extra-pyroma-options: ""

  shell-lint:
    needs: [check-style]
    name: ${{ github.repository }} Shell scripts Linter
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v1
      -
        name: Run ShellCheck
        uses: azohra/shell-linter@latest
        with:
          path: "src/main/scripts/ws.sh,src/main/sh,"

  shellcheck:
    name: runner / shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review # Change reporter.
          path: "src/main/sh" # Optional.
          pattern: "*.sh" # Optional.
          exclude: "./.git/*" # Optional.
          check_all_files_with_shebangs: "false" # Optional.

  # gherkin-lint:
  #   needs: [check-style]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     -
  #       name: gherkin-lint
  #       uses: nhatthm/gherkin-lint-action@v1
  #       with:
  #         # Optional: Version of gherkin-lint to use in the `npm install -g gherkin-lint` command. Default to `latest`.
  #         # version: latest

  #         # Optional: Comma separated list of feature files/glob patterns. Default to current working directory.
  #         feature_files: src/it/features/*

  #         # Optional: Use a custom configuration file instead of the default one.
  #         # config_file: .gherkin-lintrc

  #         # Optional: Output format. Possible values: json, stylish, xunit. Default to `stylish`.
  #         # format: stylish

  #         # Optional: Comma seperated list of files/glob patterns that the linter should ignore, overrides .gherkin-lintignore file
  #         # ignore:

  #         # Optional: Comma seperated list of additional rule directories
  #         # rule_dirs:

  # clang-tidy:
  #   name: ${{ github.repository }} C++ linter. Diagnoses typical programming errors, like style violations, interface misuse, or bugs

  # formatting-check:
  #   name: Formatting Check
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Run clang-format style check for C/C++ programs.
  #     uses: jidicula/clang-format-action@v4.4.1
  #     with:
  #       clang-format-version: '11'
  #       check-path: 'src/main/cpp/rules/sdlc/std'
  #       exclude-regex: 'src\/main\/cpp\/rules\/sdlc\/std\/API_Export.hpp'

  unit-test:
    name: ${{ github.repository }} Unit tests using ${{ matrix.compiler.name }}
    needs: [cpp-lint,python-lint]
    runs-on: ${{ matrix.config.os }}
    # if: github.event.workflow_run.conclusion != 'skipped'
    timeout-minutes: 20
    # strategy:
    #   fail-fast: false
    #   max-parallel: 1
    #   matrix:
    strategy:
      fail-fast: false
    #     env:
    #       - { COMPILER: "gcc",   COMPILER_VERSION: "11", SANITIZE: "yes"  }
    #       - { COMPILER: "gcc",   COMPILER_VERSION: "11", SANITIZE: "no"   }
    #       - { COMPILER: "clang", COMPILER_VERSION: "14", SANITIZE: "yes"  }
    #       - { COMPILER: "clang", COMPILER_VERSION: "14", SANITIZE: "no"   }
    # env: ${{ matrix.env }}
      matrix:
        bazel: [5.1.1]
        bazelisk: [1.11.0]
        python-version: [3.10]
        config:
          - { name: "Ubuntu", os: ubuntu-latest, target: "linux" }
        compiler:
          -
            name: clang-14
            install: wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh all && sudo  apt-get install --no-install-recommends -yqq curl gnupg2 lsb-release software-properties-common
            # cc: " /usr/lib/llvm-14/bin/clang-14"
            # cxx: "/usr/lib/llvm-14/bin/clang++-14"
#  update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-14/bin/clang 140
#  update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-14/bin/clang++ 140
# install: wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh all && sudo ln -sf /usr/bin/llvm-config-14 /usr/bin/llvm-config && sudo  apt-get install --no-install-recommends -yqq curl gnupg2 lsb-release software-properties-common clang-tools
            cc: " clang-14"
            cxx: "clang++-14"
          -
            name: gcc-11
            install: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt update && sudo apt-get install -y gcc-11 g++-11 lcov xvfb
            cc: "/usr/bin/gcc-11"
            cxx: "/usr/bin/g++-11"
          #   bazel_args: "--cxxopt=-std=c++17"
    steps:
      -
        name: Checkout ${{ github.ref }} ( ${{ github.sha }} )
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v2.3.4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          submodules: 'recursive'
          fetch-depth: 0
      #     ref: ${{ github.event.pull_request.head.sha }}

      -
        name: install Java zulu
        uses: actions/setup-java@v2
        with:
            distribution: 'zulu'
            java-version: '8'

      -
        name: install npm
        uses: actions/setup-node@v2
        with:
            node-version: '14'

      -
        name: install ${{ matrix.compiler.name }} compiler
        env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
        run: |
          ${{ matrix.compiler.install }}
          ${{ matrix.compiler.cc }} --version
          ${{ matrix.compiler.cxx }}  --version

      -
        name: setup bazelisk ${{ matrix.bazelisk }}
        uses: bazelbuild/setup-bazelisk@v2
        with:
          bazelisk-version: ${{ matrix.bazelisk }}

      -
        name: Define bazel output cache
        # if: always()
        uses: actions/cache@v3
        env:
          cache-name: bazel-cache
        with:
          path: "~/.cache/bazel"
          # path: |
          #   ${{ env.BZL_CACHE }}
          key: ${{ runner.os }}-build-${{ matrix.compiler.name }}-${{ env.cache-name }}-${{ hashFiles('WORKSPACE') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.compiler.name }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ matrix.compiler.name }}

      # -
      #   name: Install Bazel build tool.
      #   run: |
      #     ls -laFS ${{ github.workspace }}
      #     wget -O bazelisk "https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64"
      #     test "231ec5ca8115e94c75a1f4fbada1a062b48822ca04f21f26e4cb1cd8973cd458  bazelisk" = "$(sha256sum bazelisk)"
      #     chmod +x bazelisk
      #     mv bazelisk /usr/local/bin/bazelisk

      -
        name: Display goals of main and test packages.
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --nobuild //...
          bazelisk query @com.github.doevelopper.rules-sdlc//src/main/...
          bazelisk query @com.github.doevelopper.rules-sdlc//src/test/...

      -
        name: Validate the project is correct and all necessary information is available.
        run: |
          ls -lart ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @org_apache_apr//:apr

      -
        name: Post-process the generated files from compilation,
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @com_github_libexpat//:expat

      -
        name: Generate any test source code for inclusion in compilation.
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @com_github_openssl//:openssl
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @org_apache_apr_util//:aprutil

      -
        name: Process the test source code, for example to filter any values.
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @net_zlib_fossils//:zlib

      -
        name: Create resources for testing.
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @org_apache_xerces//:xerces

      -
        name: Copy and process the resources into the test destination directory.
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @com_github_nelhage_rules_boost//...

      -
        name: Compile the test source code into the test destination directory
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @org_apache_logging_log4cxx//:log4cxx

      -
        name: Post-process the generated files from test compilation,
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @com.github.doevelopper.rules-sdlc//src/main/...

      -
        name: Run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
        run: |
          ls -laFS ${{ github.workspace }}
          bazelisk build  --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @com.github.doevelopper.rules-sdlc//src/test/...

      -
        name: Build applications.
        run: |
          ls -laFS ${{ github.workspace }}
      # bazelisk run --config linux --action_env CC=${{ matrix.compiler.cc }} --action_env CXX=${{ matrix.compiler.cxx }} --client_env=CC=${{ matrix.compiler.cc }} --client_env=CXX=${{ matrix.compiler.cxx }} @com.github.doevelopper.rules-sdlc//src/main/cpp:rules-sdlc.bin

      # -
      #   name: Pack builds datat for further analysis.
      #   run: |
      #     ls -laFS ${{ github.workspace }}
      #     mkdir -pv build-logs
      #     cp -v  bazel-out/k8-fastbuild/bin/external/org_apache_logging_log4cxx/log4cxx_foreign_cc/CMake.log   build-logs
      # -
      #   name: Discord notification
      #   uses: rjstone/discord-webhook-notify@v1
      #   if: failure() && ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
      #   with:
      #     severity: error
      #     details: CI failed on ${{ matrix.os }}
      #     webhookUrl: ${{ secrets.DISCORD_WEBHOOK }
      # -
      #   name: 'Archive ${{ github.repository }} Logs'
      #   uses: actions/upload-artifact@v2
      #   if: always()  # failure() && steps.build.outcome == 'success'
      #   with:
      #     name: ci-${{ github.repository }}-${{github.job}} builds artifacts
      #     path: |
      #       ${{ github.repository }}-ci-logs.tar.gz  # ${{github.workspace}}/build
      #     retention-days: 5
