name: "linux"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 7 * * SUN'

jobs:

  build-and-test-ubuntu:
    name: Build and Test (Ubuntu)
    runs-on: ubuntu-latest
    env:
      BAZEL: bazelisk-linux-amd64

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        fetch-depth: '0'

      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

    - name: Check out repository code
      uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}

    - run: echo "üçè This job's status is ${{ job.status }}."

    - name: Free up some space in an image
      run: |
        # This doesn't seem to affect the speed of the run, but takes ~2 minutes,
        # commented out for now.
        #sudo rm -rf /usr/share/dotnet
        #sudo rm -rf /opt/ghc
        df -h

    - name: Mount bazel cache
      uses: actions/cache@v2
      with:
        # See https://docs.bazel.build/versions/master/output_directories.html
        path: "~/.cache/bazel"
        key: ${{ runner.os }}-bazel-${{ hashFiles('WORKSPACE.bazel') }}
        restore-keys: ${{ runner.os }}-bazel

    - name: Install bazelisk
      run: |
        curl -LO "https://github.com/bazelbuild/bazelisk/releases/latest/download/$BAZEL"
        chmod +x $BAZEL

    - name: Install sox and friends
      run: |
        sudo apt-get update
        sudo apt-get install -y sox
        sudo apt-get install -y python3-pip
        sudo pip3 install matplotlib

# - uses: actions/checkout@v2
    # - name: Clang format
    #   run: |
    #     git clang-format HEAD~1
    #     git diff --exit-code

    # - name: Clang tidy
    #   run: |
    #     CHECKS=-\*,clang-analyzer-\*,boost-\*,cppcoreguidelines-\*,modernize-\*,performance-\*
    #     clang-tidy --warnings-as-errors=${CHECKS} \
    #                  -checks=${CHECKS} \
    #                  -header-filter=src/include/hsm/\* \
    #                  benchmark/simple/hsm.cpp \
    #                  -- -Isrc/include/ -Ibenchmark/ -std=c++17

    - name: Build
      # run: ./$BAZEL build -c opt //build/... //eidos/...
      run: ./$BAZEL build --nobuild //...


    - name: Test
      # run: ./$BAZEL test -c opt --test_output=errors //build/... //cfs-xxx/...
      run: ./$BAZEL test --nobuild //...
