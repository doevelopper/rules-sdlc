name: CI Workflow
on:
  push:
    branches: [ master, feature/** ]
  pull_request:
    branches: [ develop ]

jobs:
  # Job that builds, configures, and tests the repository
    build:
        name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
        runs-on: ${{ matrix.os }}
        strategy:
        matrix:
            build_type: [Debug, Release]
            os: [ubuntu-latest, windows-latest, macOS-latest]
            cxx: ["g++-10", "clang++-11"]
            build_mode: ["Release", "Debug"]
            panic_backtrace: ["ON", "OFF"]
            backtrace: ["ON", "OFF"]
            include:
              - cxx: "g++-10"
                cc: "gcc-10"
              - cxx: "clang++-11"
                cc: "clang-11"

    steps:
    - name: prepare git for checkout on windows
        if: matrix.os == 'windows-latest'
        run: |
            git config --global core.autocrlf false
            git config --global core.eol lf

    - name: install deps library on ubuntu
       if: matrix.os == 'ubuntu-latest'
       run: sudo apt update && sudo apt-get install -y python3-pip python3-dev python3-wheel cython3 python3-setuptools && apt-get --assume-yes --quiet clean

    - name: Print System Information
      run: |
        cmake --version
        pip --version
        ${{ matrix.cxx }} --version

    # Clone the repository in $GITHUB_WORKSPACE
    - uses: actions/checkout@master

    # Note: we use bash also on Windows in order to have the same commands such
    #       as cd, mkdir, etc in all OSs.

    - name: Configure
        shell: bash
        run: |
            cmake -E make_directory target
            cmake -E chdir taget cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=/usr/local ..

    - name: Build
#        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
            cmake --build target --config ${{ matrix.build_type }} --target all --clean-first > /dev/null 2>&1
            cmake --build target --target install

    # - name: Install Pester
    #   shell: pwsh
    #   run: |
    #     Install-Module Pester -Force -Scope CurrentUser -RequiredVersion 4.10.1
    #     Install-Module Assert -Force -Scope CurrentUser

    - name: Test
        shell: bash
        run: |
            cd target
            cmake -DBUILD_TESTING:BOOL=ON .
            cmake --build . --config ${{ matrix.build_type }}
            ctest --output-on-failure -C ${{ matrix.build_type }} .

    - name: Integration Test
        shell: bash
        run: |
            cd target
            cmake -DBUILD_TESTING:BOOL=ON .
            cmake --build . --config ${{ matrix.build_type }}
            ctest --output-on-failure -C ${{ matrix.build_type }} .

    - name: Coverage
        shell: bash
        run: |
            cd target
            cmake -DBUILD_TESTING:BOOL=ON .
            cmake --build . --config ${{ matrix.build_type }}
            ctest --output-on-failure -C ${{ matrix.build_type }} .

    - name: Bazel end to end
        shell: bash
        run: |
            bazel --action_evn=ACE_ROOT build //...
            bazel --action_evn=ACE_ROOT test //...
            bazel --action_evn=ACE_ROOT coverage //...
